/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Program, ProgramError } from '@metaplex-foundation/umi';

type ProgramErrorConstructor = new (
  program: Program,
  cause?: Error
) => ProgramError;
const codeToErrorMap: Map<number, ProgramErrorConstructor> = new Map();
const nameToErrorMap: Map<string, ProgramErrorConstructor> = new Map();

/** OwnerMismatched: Invalid owner */
export class OwnerMismatchedError extends ProgramError {
  override readonly name: string = 'OwnerMismatched';

  readonly code: number = 0x1770; // 6000

  constructor(program: Program, cause?: Error) {
    super('Invalid owner', program, cause);
  }
}
codeToErrorMap.set(0x1770, OwnerMismatchedError);
nameToErrorMap.set('OwnerMismatched', OwnerMismatchedError);

/** InvalidTimestamp: Invalid timestamp */
export class InvalidTimestampError extends ProgramError {
  override readonly name: string = 'InvalidTimestamp';

  readonly code: number = 0x1771; // 6001

  constructor(program: Program, cause?: Error) {
    super('Invalid timestamp', program, cause);
  }
}
codeToErrorMap.set(0x1771, InvalidTimestampError);
nameToErrorMap.set('InvalidTimestamp', InvalidTimestampError);

/** AlreadyStaked: Already staked */
export class AlreadyStakedError extends ProgramError {
  override readonly name: string = 'AlreadyStaked';

  readonly code: number = 0x1772; // 6002

  constructor(program: Program, cause?: Error) {
    super('Already staked', program, cause);
  }
}
codeToErrorMap.set(0x1772, AlreadyStakedError);
nameToErrorMap.set('AlreadyStaked', AlreadyStakedError);

/** NotStaked: Not staked */
export class NotStakedError extends ProgramError {
  override readonly name: string = 'NotStaked';

  readonly code: number = 0x1773; // 6003

  constructor(program: Program, cause?: Error) {
    super('Not staked', program, cause);
  }
}
codeToErrorMap.set(0x1773, NotStakedError);
nameToErrorMap.set('NotStaked', NotStakedError);

/** StakingNotInitialized: Staking not initialized */
export class StakingNotInitializedError extends ProgramError {
  override readonly name: string = 'StakingNotInitialized';

  readonly code: number = 0x1774; // 6004

  constructor(program: Program, cause?: Error) {
    super('Staking not initialized', program, cause);
  }
}
codeToErrorMap.set(0x1774, StakingNotInitializedError);
nameToErrorMap.set('StakingNotInitialized', StakingNotInitializedError);

/** AttributesNotInitialized: Attributes not initialized */
export class AttributesNotInitializedError extends ProgramError {
  override readonly name: string = 'AttributesNotInitialized';

  readonly code: number = 0x1775; // 6005

  constructor(program: Program, cause?: Error) {
    super('Attributes not initialized', program, cause);
  }
}
codeToErrorMap.set(0x1775, AttributesNotInitializedError);
nameToErrorMap.set('AttributesNotInitialized', AttributesNotInitializedError);

/** Underflow: Underflow */
export class UnderflowError extends ProgramError {
  override readonly name: string = 'Underflow';

  readonly code: number = 0x1776; // 6006

  constructor(program: Program, cause?: Error) {
    super('Underflow', program, cause);
  }
}
codeToErrorMap.set(0x1776, UnderflowError);
nameToErrorMap.set('Underflow', UnderflowError);

/** Overflow: Overflow */
export class OverflowError extends ProgramError {
  override readonly name: string = 'Overflow';

  readonly code: number = 0x1777; // 6007

  constructor(program: Program, cause?: Error) {
    super('Overflow', program, cause);
  }
}
codeToErrorMap.set(0x1777, OverflowError);
nameToErrorMap.set('Overflow', OverflowError);

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
export function getCoreStakingExampleErrorFromCode(
  code: number,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = codeToErrorMap.get(code);
  return constructor ? new constructor(program, cause) : null;
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
export function getCoreStakingExampleErrorFromName(
  name: string,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = nameToErrorMap.get(name);
  return constructor ? new constructor(program, cause) : null;
}
